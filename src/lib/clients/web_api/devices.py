import typing

import lib.clients.web_api.base


if typing.TYPE_CHECKING:
  import lib.clients.web_api.client


class WebAPIDevicesClient(lib.clients.web_api.base.WebAPIBaseClient):
  async def get_available_home_for_device(
      self,
      control_id: str,
      session_id: str,
  ) -> "lib.clients.web_api.client.WebAPIResponse":
    """GET /devices/{device_id}/available-home.

    Args:
      available_home_token: A JWT containing the `home_id` of the available Home to join, signed
                            with the Control’s signing key.
      control_id: The ID of the Control whose available home is being retrieved.
      session_id: A nonce that semi-uniquely identifies the installation attempt.
    """
    return await self.get(
        cert_required=True,
        path=f"/devices/{control_id}/available-home?session_id={session_id}",
    )

  async def post_available_home_for_device(
      self,
      available_home_token: str,
      control_fingerprint: str,
      control_id: str,
      session_id: str,
      home_id: typing.Optional[str] = None,
      installing_device_id: typing.Optional[str] = None,
      user_authorization_token: typing.Optional[str] = None,
      check_software_integrity: bool = False,
  ) -> "lib.clients.web_api.client.WebAPIResponse":
    """POST to the /devices/{device_id}/available-home endpoint.

    Args:
      available_home_token: A JWT containing the `home_id` of the available Home to join, signed
                            with the Control’s signing key.
      control_fingerprint: Used to verify the Control’s identity.
      control_id: The ID of the new Control to which the available home is to be added.
      home_id: The ID of the installing device's home.
      installing_device_id: The ID of the device making this request.
      session_id: A nonce that semi-uniquely identifies the installation attempt. This value is
                  randomly generated by the Control each time it displays a new QR code.
      user_authorization_token: The JSON Web Token that authenticates the user's current session.
    """
    headers = {}
    if home_id and installing_device_id:
      headers.update(lib.networking.utils.format_headers({
          "home-id": home_id,
          "device-id": installing_device_id,
      }))
    if user_authorization_token:
      headers.update({"Authorization": f"Bearer {user_authorization_token}"})
    return await self.post(
        cert_required=True,
        extra_headers=headers,
        json=dict(
            available_home_token=available_home_token,
            device_fingerprint=control_fingerprint,
            session_id=session_id,
            check_software_integrity=check_software_integrity,
        ),
        path=f"/devices/{control_id}/available-home",
    )

  async def get_device_public_key(
      self,
      device_id: str,
      key_purpose: str,
      user_authorization_token: typing.Optional[str] = None,
  ) -> "lib.clients.web_api.client.WebAPIResponse":
    headers = {}
    if user_authorization_token:
      headers.update({"Authorization": f"Bearer {user_authorization_token}"})
    return await self.get(
        cert_required=True,
        extra_headers=headers,
        path=f"/devices/{device_id}/public-keys/{key_purpose}",
    )

  async def put_device_public_key(
      self,
      device_id: str,
      key_purpose: str,
      asymmetric_key_algorithm: str,
      public_key: bytes
  ) -> "lib.clients.web_api.client.WebAPIResponse":
    return await self.put(
        cert_required=True,
        json=dict(
            public_key=public_key.hex(),
            asymmetric_key_algorithm=asymmetric_key_algorithm,
        ),
        path=f"/devices/{device_id}/public-keys/{key_purpose}",
    )

  async def put_device_integrity_proof(
      self,
      device_id: str,
      key_purpose: str,
      challenge: bytes,
      signature: bytes,
  ) -> "lib.clients.web_api.client.WebAPIResponse":
    return await self.put(
        cert_required=True,
        json=dict(
            challenge=challenge.hex(),
            signature=signature.hex(),
        ),
        path=f"/devices/{device_id}/integrity-proofs/{key_purpose}",
    )
